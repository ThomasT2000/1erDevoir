trigger:
  branches:
    include:
      - main  # Déclencher le pipeline CI uniquement sur la branche 'main'

pool:
  name: 'Agent' # Nom de l'agent auto-hébergé utilisé pour exécuter les tâches du pipeline

variables:
  vm1Json: 'VM1.json'
  vm2Json: 'VM2.json'
  webscaleJson: 'webscalteset.json'
  azureDeployJson: 'azuredeploy.json'
  azureDeployParamsJson: 'azuredeploy.parameters.json'

stages:
- stage: Validation
  displayName: 'Validation des fichiers de configuration et des scripts'
  jobs:
    - job: ValidateConfigs
      displayName: "Validation des fichiers JSON et du script de mise à l'échelle"
      steps:
        # Étape 1: Validation du fichier JSON pour VM1
        - script: |
            echo "Validation du fichier VM1.json"
            powershell -Command "Get-Content $(vm1Json) | ConvertFrom-Json" || exit 1
          displayName: "Validation de VM1.json"

        # Étape 2: Validation du fichier JSON pour VM2
        - script: |
            echo "Validation du fichier VM2.json"
            powershell -Command "Get-Content $(vm2Json) | ConvertFrom-Json" || exit 1
          displayName: "Validation de VM2.json"

        # Étape 3: Validation du fichier JSON pour Web Scale Set
        - script: |
            echo "Validation du fichier webscalteset.json"
            powershell -Command "Get-Content $(webscaleJson) | ConvertFrom-Json" || exit 1
          displayName: "Validation de webscalteset.json"

        # Étape 4: Validation du fichier JSON pour azuredeploy.json
        - script: |
            echo "Validation du fichier azuredeploy.json"
            powershell -Command "Get-Content $(azureDeployJson) | ConvertFrom-Json" || exit 1
          displayName: "Validation de azuredeploy.json"

        # Étape 5: Validation du fichier JSON pour azuredeploy.parameters.json
        - script: |
            echo "Validation du fichier azuredeploy.parameters.json"
            powershell -Command "Get-Content $(azureDeployParamsJson) | ConvertFrom-Json" || exit 1
          displayName: "Validation de azuredeploy.parameters.json"

        # Étape 6: Validation du script Mise_a_echelle.sh
        - script: |
            echo "Validation du script Mise_a_echelle.sh"
            bash -n Mise_a_echelle.sh || exit 1  # Vérifie la syntaxe du script Bash
          displayName: "Validation du script de mise à l'échelle"

        # Étape 7: Vérification du fichier README.md
        - powershell: |
            Write-Output "Vérification du fichier README.md"
            if ((Get-Item README.md).length -eq 0) {
              Write-Output "Erreur : le fichier README.md est vide ou non renseigné." 
              exit 1
            }
          displayName: "Vérification du contenu du README.md"

